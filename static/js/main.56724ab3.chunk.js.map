{"version":3,"sources":["components/SearchForm.js","components/LibraryItem.js","components/Search.js","components/Library.js","components/Customer.js","components/CustomerCollection.js","App.js","registerServiceWorker.js","index.js"],"names":["Search","props","useState","query","formFields","setFormFields","onSubmitHandler","event","preventDefault","addSearchCallback","onSubmit","name","className","onChange","updatedFormState","target","value","text","type","onClick","LibraryItem","src","imageURL","alt","title","releaseDate","overview","console","log","newSelected","id","onUpdateSelected","selected_id","setErrorMessage","displaySearch","setDisplaySearch","searchList","searchTerm","axios","get","BASE_URL","params","then","response","data","movie","push","key","release_date","externalID","external_id","image_url","addMovieCreationCallback","catch","error","message","addMovieAlert","Library","movieComponents","movies","map","selectedMovie","onUpdateSelectedMovie","Customer","registered","address","city","state","movies_checked_out_count","selected","CustomerCollection","customerComponents","customers","customer","registered_at","selectedCustomer","onUpdateSelectedCustomer","Home","App","setSelectedCustomer","setSelectedMovie","customerList","setCustomerList","movieList","setMovieList","setSuccessMessage","errorMessage","setAddMovieAlert","useEffect","to","toUpperCase","showRentalButton","rental_params","method","url","customer_id","due_date","exact","path","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.56724ab3.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './SearchForm.css'\n\nconst Search = (props) => {\n\n\tconst [formFields, setFormFields] = useState({\n\t\tquery: '',\n\t});\n\n\tconst onFieldChange = (event) => {\n\t\tconst updatedFormState = {...formFields};\n\n\t\tupdatedFormState[event.target.name] = event.target.value;\n\t\tsetFormFields(updatedFormState);\n\t};\n\n\tconst onSubmitHandler = (event) => {\n\t\tevent.preventDefault();\n\n\t\tif(formFields.query){\n\t\t\tprops.addSearchCallback(formFields.query)\n\t\t}\n\t};\n\n  return (\n\t\t<form onSubmit={ onSubmitHandler }>\n\t\t\t<h1>Search for a Movie</h1>\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t{/* <label className=\"new-card-form__form-label\" htmlFor=\"text\">Text: </label> */}\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"query\"\n\t\t\t\t\t\tclassName=\"input-search\"\n\t\t\t\t\t\tonChange={ onFieldChange }\n\t\t\t\t\t\tvalue={ formFields.text }\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tname=\"submit\"\n\t\t\t\t\tvalue=\"Submit\"\n\t\t\t\t\tclassName=\"input-search-button\"\n\t\t\t\t\tonClick={ onSubmitHandler }\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</form>\n  );\n\n}\n\nexport default Search;","import React from 'react';\nimport './LibraryItem.css';\n\nconst LibraryItem = (props) => {\n\t\n  const onButtonClick = () => {\n\t\tconsole.log(props)\n    const newSelected = {\n      id: props.id,\n      title: props.title,\n    }\n    props.onUpdateSelected(newSelected)\n\t}\n\t\n\tconst selected = () => {\n\t\tconsole.log(props)\n\t\tconsole.log(\"hi\")\n    if (props.id === props.selected_id) {\n      return true\n    } else {\n      return false\n    }\n\t}\n\t\n  return(\n\t\t<section className=\"movie-listing\">\n\t\t\t<img src={ props.imageURL } alt={`poster for ${ props.title } `} />\n\t\t\t<section>\n\t\t\t\t<h3>{ props.title }</h3>\n\t\t\t\t<p>\n\t\t\t\t\t<strong>{ props.releaseDate }</strong>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t{ props.overview }\n\t\t\t\t</p>\n\t\t\t\t<button onClick={onButtonClick}>\n\t\t\t\t\t{console.log(props.selected_id)}\n          {selected() ? 'Selected' : 'Select'}\n      </button>\n\t\t\t</section>\n\n\t\t</section>\n  );\n\n}\n\nexport default LibraryItem;","import React, { useState, useEffect } from 'react';\nimport {\n  Link\n} from \"react-router-dom\";\nimport axios from 'axios';\nimport SearchForm from './SearchForm';\nimport LibraryItem from './LibraryItem';\nimport './LibraryItem.css';\nimport './Library.css';\nimport './Search.css';\n\nconst Search = (props) => {\n\n\tconst BASE_URL = \"http://localhost:3000/\"\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [displaySearch, setDisplaySearch] = useState([]);\n  const searchList = [];\n\n\tconst searchMovieDatabase = (searchTerm) => {\n\t\tconsole.log(searchTerm)\n\n\t\tconst onSubmitHandler = (movie) => {\n\t\t\tprops.addMovieCreationCallback(movie);\n\t\t};\n\n\t\taxios.get(BASE_URL + \"movies/\", {\n\t\t\tparams: {\n\t\t\t\tquery: searchTerm\n\t\t\t}\n\t\t})\n\t\t.then( (response) => {\n\t\t\tconsole.log(response);\n\t\t\tfor (let movie of response.data) {\n\t\t\t\tsearchList.push(\n\t\t\t\t\t<section>\n\t\t\t\t\t\t<LibraryItem\n\t\t\t\t\t\t\tkey={ movie.id }\n\t\t\t\t\t\t\tid={ movie.id }\n\t\t\t\t\t\t\ttitle={ movie.title }\n\t\t\t\t\t\t\toverview={ movie.overview }\n\t\t\t\t\t\t\treleaseDate={ movie.release_date } \n\t\t\t\t\t\t\texternalID={ movie.external_id }\n\t\t\t\t\t\t\timageURL={ movie.image_url }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Link onClick={ () => onSubmitHandler(movie) } className=\"item-link\">Add to Library</Link>\n\t\t\t\t\t</section>\n\t\t\t\t);\n\t\t\t};\n\t\t\tsetDisplaySearch(searchList);\n\t\t})\n\t\t.catch((error) => {\n\t\t\tsetErrorMessage(error.message);\n\t\t\tconsole.log(error.message);\n\t\t});\n\t\n\t};\n\n  return (\n\t\t<div>\n\t\t\t<SearchForm addSearchCallback={ searchMovieDatabase } />\n\n\t\t\t{ props.addMovieAlert !== '' &&\n        <p className=\"add-movie-alert\">\n\t\t\t\t\t{ props.addMovieAlert }\n\t\t\t\t</p>\n      }\n\n\t\t\t<div className=\"show-all-movies\">\n        { displaySearch }\n      </div>\n\t\t</div>\n  );\n\n}\n\nexport default Search;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './Library.css';\nimport LibraryItem from './LibraryItem';\n\nconst Library = (props) => {\n  const movieComponents = props.movies.map((movie) => {\n    return (\n      <LibraryItem\n        key={ movie.id }\n        id={ movie.id }\n        title={ movie.title }\n        overview={ movie.overview }\n        releaseDate={ movie.release_date } \n        externalID={ movie.external_id }\n        imageURL={ movie.image_url }\n        selected_id={props.selectedMovie}\n        onUpdateSelected={props.onUpdateSelectedMovie}\n      />\n    );\n  });\n\n  return(\n    <div>\n      <h1>All Movies</h1>\n      <div className=\"show-all-movies\">\n        { movieComponents }\n      </div>\n    </div>\n  );\n}\n\nexport default Library;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types'\nimport './Customer.css'\n\nconst Customer = (props) => {\n\n  const onButtonClick = () => {\n    const newSelected = {\n      id: props.id,\n      name: props.name,\n    }\n    props.onUpdateSelected(newSelected)\n  }\n\n  const selected = () => {\n    console.log(props.selected_id)\n    if (props.id === props.selected_id) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  return(\n    <div className=\"customer-box\" >\n      <div className='customer-info'>\n        <p><strong>Customer: </strong>{props.name}</p>\n        <p><strong>Registered: </strong>{props.registered}</p>\n        <p><strong>Address: </strong>{props.address}</p>\n        <p><strong>City: </strong>{props.city}</p>\n        <p><strong>State: </strong>{props.state}</p>\n        <p><strong>Moves Checked Out: </strong>{props.movies_checked_out_count}</p>\n        <p><strong>Selected: </strong>{props.selected}</p>\n        <button onClick={onButtonClick}>\n          {selected() ? 'Selected' : 'Select'}\n        </button>\n      </div>\n    </div>\n  );\n\n}\n\nCustomer.propTypes = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n};\n\nexport default Customer;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Customer from './Customer';\n\n\nconst CustomerCollection = (props) => {\n\n  const customerComponents = props.customers.map((customer) => {\n    return (\n      <Customer\n        id={customer.id}\n        key={customer.id}\n        name={customer.name}\n        registered={customer.registered_at}\n        address={customer.address}\n        city={customer.city}\n        state={customer.state}\n        movies_checked_out_count={customer.movies_checked_out_count}\n        selected_id={props.selectedCustomer}\n        onUpdateSelected={props.onUpdateSelectedCustomer}\n      />\n    );\n  });\n\n  return(\n    <div className=\"customers\" >\n      <h2>All Customers</h2>\n      <div className=\"show-all-customers\">\n        { customerComponents }\n      </div>\n    </div>\n  );\n}\n\nexport default CustomerCollection;","import React, { Component, useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport axios from 'axios';\nimport Search from './components/Search';\nimport Library from './components/Library';\nimport CustomerCollection from './components/CustomerCollection';\n\nconst App = () => {\n  const BASE_URL = 'http://localhost:3000/'\n  const [selectedCustomer, setSelectedCustomer] = useState({\n    name: '',\n    id: null,\n  });\n  const [selectedMovie, setSelectedMovie] = useState({\n    title: '',\n    id: null,\n  });\n  const [customerList, setCustomerList] = useState([]);\n  const [movieList, setMovieList] = useState([]);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [addMovieAlert, setAddMovieAlert] = useState('');\n\n  useEffect(() => {\n    axios.get(BASE_URL + \"customers/\")\n      .then((response) => {\n        setCustomerList(response.data);\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n      })\n  }, []);\n\n  useEffect(() => {\n    axios.get(BASE_URL + \"movies/\")\n      .then((response) => {\n        setMovieList(response.data);\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n      })\n  }, []);\n\n\n  const updateSelectedCustomer = (newSelected) => {\n    console.log(newSelected)\n\n    setSelectedCustomer({\n      name: newSelected.name,\n      id: newSelected.id\n    });\n    setSuccessMessage(`Customer ${newSelected.name} has been selected`)\n  };\n\n  const updateSelectedMovie = (newSelected) => {\n    setSelectedMovie({\n      title: newSelected.title,\n      id: newSelected.id\n    });\n    setSuccessMessage(`Movie ${newSelected.title} has been selected`)\n  };\n\n  const showRentalButton = () => {\n    console.log(selectedCustomer)\n    if (!(selectedMovie.id === null) && !(selectedCustomer.id === null)) {\n      return true;\n    };\n  };\n\n  const checkout = () => {\n    const rental_params = BASE_URL + `rentals/${selectedMovie.title}/check-out`;\n\n    axios({\n      method: 'post',\n      url: rental_params,\n      params: {\n        customer_id: selectedCustomer.id,\n        due_date: '2020/12/30'\n      }\n    })\n    .then(() => {\n      setSuccessMessage(\"Successfully made rental\")\n    })\n    .catch((error) => {\n      setErrorMessage(error.message);\n    });\n  };\n\n  const addMovieToLibrary = (movie) => {\n    axios({\n      method: 'post',\n      url: BASE_URL + 'movies/',\n      params: movie \n    })\n    .then((response) => {\n      setAddMovieAlert(`${ response.data.title } added to library!`);\n      console.log(response)\n    })\n    .catch((error) => {\n      setAddMovieAlert(\"This movie is already in the library.\");\n      console.log(error);\n    });\n  };\n\n  return (\n    <Router>\n      <div>\n        <header className=\"app-header\">\n          <div className='app-header__nav'>\n            <h1>Title of Our Movie App</h1>\n            <ul>\n              <li>\n                <Link to=\"/\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/search\">Search</Link>\n              </li>\n              <li>\n                <Link to=\"/library\">Library</Link>\n              </li>\n              <li>\n                <Link to=\"/customers\">Customers</Link>\n              </li>\n            </ul>\n\n            { errorMessage ? <div><h2 className=\"error-msg\">{errorMessage}</h2></div> : '' }\n\n            <hr />\n          </div>\n          <div className='app-header__selections'>\n            <h2>Rental Selections</h2>\n            <p>Movie: {selectedMovie.title.toUpperCase()}</p>\n            <p>Customer: {selectedCustomer.name.toUpperCase()}</p>\n            {\n              showRentalButton() ? \n              <button onClick={checkout}>\n                Create Rental\n              </button> : ''\n            } \n          </div>\n\n        </header>\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/\">\n            <Home />\n          </Route>\n          <Route path=\"/search\">\n            <Search addMovieCreationCallback={ addMovieToLibrary } addMovieAlert={ addMovieAlert } />\n          </Route>\n          <Route path=\"/library\">\n            <Library \n              movies={movieList}\n              onUpdateSelectedMovie={updateSelectedMovie}\n              selectedMovie={selectedMovie.id}\n            />\n          </Route>\n          <Route path=\"/customers\">\n            <CustomerCollection \n              customers={customerList} \n              onUpdateSelectedCustomer={updateSelectedCustomer} \n              selectedCustomer={selectedCustomer.id}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n// You can think of these components as \"pages\"\n// in your app.\n\nfunction Home() {\n  return (\n    <div>\n      <h2>Home</h2>\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}