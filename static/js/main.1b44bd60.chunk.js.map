{"version":3,"sources":["components/SearchForm.js","components/LibraryItem.js","components/Search.js","components/Library.js","components/Customer.js","components/CustomerCollection.js","App.js","registerServiceWorker.js","index.js"],"names":["SearchForm","props","useState","query","formFields","setFormFields","onSubmitHandler","event","preventDefault","addSearchCallback","onSubmit","name","className","onChange","updatedFormState","target","value","text","type","onClick","LibraryItem","src","imageURL","alt","title","releaseDate","overview","Search","setErrorMessage","displaySearch","setDisplaySearch","searchList","searchTerm","axios","get","BASE_URL","params","then","response","data","movie","push","key","external_id","id","release_date","externalID","image_url","addMovieCreationCallback","catch","error","message","console","log","addMovieAlert","Library","movieComponents","movies","map","selected","newSelected","onUpdateSelectedMovie","onButtonClick","selectedMovie","Customer","phone","movies_checked_out_count","account_credit","address","city","state","zip","onUpdateSelected","selected_id","CustomerCollection","customerComponents","customers","customer","postal_code","selectedCustomer","onUpdateSelectedCustomer","Home","App","setSelectedCustomer","setSelectedMovie","customerList","setCustomerList","movieList","setMovieList","setSuccessMessage","errorMessage","setAddMovieAlert","useEffect","getMovies","updateSelectedCustomer","updateSelectedMovie","to","showRentalButton","rental_params","method","url","customer_id","due_date","exact","path","newMovieList","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.1b44bd60.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './SearchForm.css'\n\nconst SearchForm = (props) => {\n\n\tconst [formFields, setFormFields] = useState({\n\t\tquery: '',\n\t});\n\n\tconst onFieldChange = (event) => {\n\t\tconst updatedFormState = {...formFields};\n\n\t\tupdatedFormState[event.target.name] = event.target.value;\n\t\tsetFormFields(updatedFormState);\n\t};\n\n\tconst onSubmitHandler = (event) => {\n\t\tevent.preventDefault();\n\n\t\tif(formFields.query){\n\t\t\tprops.addSearchCallback(formFields.query)\n\t\t}\n\t};\n\n  return (\n\t\t<form onSubmit={ onSubmitHandler }>\n\t\t\t<h1>Search for a Movie</h1>\n\t\t\t<div>\n\t\t\t\t<div>\n\t\t\t\t\t<input\n\t\t\t\t\t\tname=\"query\"\n\t\t\t\t\t\tclassName=\"input-search\"\n\t\t\t\t\t\tonChange={ onFieldChange }\n\t\t\t\t\t\tvalue={ formFields.text }\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<input\n\t\t\t\t\ttype=\"submit\"\n\t\t\t\t\tname=\"submit\"\n\t\t\t\t\tvalue=\"Submit\"\n\t\t\t\t\tclassName=\"input-search-button\"\n\t\t\t\t\tonClick={ onSubmitHandler }\n\t\t\t\t/>\n\t\t\t</div>\n\t\t</form>\n\t);\n\t\n}\n\nSearchForm.propTypes = {\n  addSearchCallback: PropTypes.func.isRequired\n};\n\nexport default SearchForm;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport './LibraryItem.css';\n\nconst LibraryItem = (props) => {\n\t\n  return(\n\t\t<section className=\"movie-listing\">\n\t\t\t<img src={ props.imageURL } alt={`poster for ${ props.title } `} />\n\t\t\t<section>\n\t\t\t\t<h3>{ props.title }</h3>\n\t\t\t\t<p>\n\t\t\t\t\t<strong>{ props.releaseDate }</strong>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t{ props.overview }\n\t\t\t\t</p>\n\t\t\t</section>\n\t\t</section>\n  );\n}\n\nLibraryItem.propTypes = {\n\ttitle: PropTypes.string.isRequired,\n\treleaseDate: PropTypes.string,\n\toverview: PropTypes.string,\n\timageURL: PropTypes.string,\n\texternalID: PropTypes.number.isRequired\n};\n\nexport default LibraryItem;","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport SearchForm from './SearchForm';\nimport LibraryItem from './LibraryItem';\nimport './Search.css';\n\nconst Search = (props) => {\n\n\tconst BASE_URL = \"https://cors-anywhere.herokuapp.com/http://example-env.eba-2un3hw2p.us-west-2.elasticbeanstalk.com/\";\n\tconst [errorMessage, setErrorMessage] = useState(null);\n\tconst [displaySearch, setDisplaySearch] = useState([]);\n  const searchList = [];\n\n\tconst searchMovieDatabase = (searchTerm) => {\n\t\tconst onSubmitHandler = (movie) => {\n\t\t\tprops.addMovieCreationCallback(movie);\n\t\t};\n\n\t\taxios.get(BASE_URL + \"movies/\", {\n\t\t\tparams: {\n\t\t\t\tquery: searchTerm\n\t\t\t}\n\t\t})\n\t\t.then( (response) => {\n\t\t\tfor (let movie of response.data) {\n\t\t\t\tsearchList.push(\n\t\t\t\t\t<section key={ movie.external_id }>\n\t\t\t\t\t\t<LibraryItem\n\t\t\t\t\t\t\tkey={ movie.id }\n\t\t\t\t\t\t\tid={ movie.id }\n\t\t\t\t\t\t\ttitle={ movie.title }\n\t\t\t\t\t\t\toverview={ movie.overview }\n\t\t\t\t\t\t\treleaseDate={ movie.release_date } \n\t\t\t\t\t\t\texternalID={ movie.external_id }\n\t\t\t\t\t\t\timageURL={ movie.image_url }\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<button onClick={ () => onSubmitHandler(movie) } className=\"item-link\">Add to Library</button>\n\t\t\t\t\t</section>\n\t\t\t\t);\n\t\t\t};\n\t\t\tsetDisplaySearch(searchList);\n\t\t})\n\t\t.catch((error) => {\n\t\t\tsetErrorMessage(error.message);\n\t\t\tconsole.log(error.message);\n\t\t});\n\t\n\t};\n\n  return (\n\t\t<div>\n\t\t\t<SearchForm addSearchCallback={ searchMovieDatabase } />\n\n\t\t\t{ props.addMovieAlert !== '' &&\n        <p className=\"add-movie-alert\">\n\t\t\t\t\t{ props.addMovieAlert }\n\t\t\t\t</p>\n      }\n\n\t\t\t<div className=\"show-all-movies\">\n        { displaySearch }\n      </div>\n\t\t</div>\n\t);\n\t\n}\n\nSearch.propTypes = {\n  addMovieCreationCallback: PropTypes.func.isRequired,\n  addMovieAlert: PropTypes.string.isRequired,\n};\n\nexport default Search;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LibraryItem from './LibraryItem';\nimport './Library.css';\n\nconst Library = (props) => {\n\n  const onButtonClick = (selected) => {\n    const newSelected = {\n      id: selected.id,\n      title: selected.title,\n    }\n    props.onUpdateSelectedMovie(newSelected)\n\t}\n\t\n\tconst selected = () => {\n    if (props.id === props.selectedMovie) {\n      return true\n    } else {\n      return false\n    }\n\t}\n\n  let movieComponents  = [];\n\n  if (props.movies) {\n    movieComponents = props.movies.map((movie) => {\n      return (\n        <section key= { movie.id }>\n          <LibraryItem\n            key={ movie.id }\n            id={ movie.id }\n            title={ movie.title }\n            overview={ movie.overview }\n            releaseDate={ movie.release_date } \n            externalID={ movie.external_id }\n            imageURL={ movie.image_url }\n          /> \n          <button onClick={ () => onButtonClick(movie) } className=\"item-link\">\n            {selected() ? 'Selected' : 'Select'}\n          </button>\n        </section>\n\n      );\n    });\n  };\n\n  return(\n    <div>\n      <h1>All Movies</h1>\n      <div className=\"show-all-movies\">\n        { movieComponents }\n      </div>\n    </div>\n  );\n\n}\n\nLibrary.propTypes = {\n\tonUpdateSelectedMovie: PropTypes.func.isRequired,\n\tmovies: PropTypes.array.isRequired,\n\tselectedMovie: PropTypes.string,\n};\n\nexport default Library;","import React from 'react';\nimport PropTypes from 'prop-types'\nimport './Customer.css'\n\nconst Customer = (props) => {\n\n  const onButtonClick = () => {\n    const newSelected = {\n      id: props.id,\n      name: props.name,\n    }\n    props.onUpdateSelected(newSelected)\n  }\n\n  const selected = () => {\n    if (props.id === props.selected_id) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  return(\n    <section className='customer-listing'>\n\n      <section className=\"customer-name\">\n        <h2><strong>{props.name}</strong></h2>\n        <p>{props.phone}</p>\n      </section>\n\n      <section className=\"rental-info\">\n        <ul>\n          <li><strong>Rental Info:</strong></li>\n          <li>Moves checked out: {props.movies_checked_out_count}</li>\n          <li>Credit: ${props.account_credit}</li>\n        </ul>\n      </section>\n\n      <section className=\"address-info\">\n          <ul>\n            <li><strong>Address: </strong></li>\n            <li>{props.address}</li>\n            <li>{props.city}, {props.state} {props.zip}</li>\n            <li></li>\n          </ul>\n      </section>\n\n      <button onClick={onButtonClick} className=\"button\">\n        {selected() ? 'Selected' : 'Select for Rental'}\n      </button>\n    </section>\n  );\n\n}\n\nCustomer.propTypes = {\n  name: PropTypes.string.isRequired,\n  id: PropTypes.string.isRequired,\n  phone: PropTypes.string.isRequired,\n};\n\nexport default Customer;","import React from 'react';\nimport Customer from './Customer';\nimport './CustomerCollection.css';\n\nconst CustomerCollection = (props) => {\n\n  const customerComponents = props.customers.map((customer) => {\n    return (\n      <Customer\n        id={customer.id}\n        key={customer.id}\n        name={customer.name}\n        phone={customer.phone}\n\n        movies_checked_out_count={customer.movies_checked_out_count}\n        account_credit={customer.account_credit}\n\n        address={customer.address}\n        city={customer.city}\n        state={customer.state}\n        zip={customer.postal_code}\n        \n        selected_id={props.selectedCustomer}\n        onUpdateSelected={props.onUpdateSelectedCustomer}\n      />\n    );\n  });\n\n  return(\n    <section>\n      <h1>All Customers</h1>\n      <section className=\"customers\">\n        { customerComponents }\n      </section>\n    </section>\n  );\n}\n\nexport default CustomerCollection;","import React, { useState, useEffect } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport axios from 'axios';\nimport Search from './components/Search';\nimport Library from './components/Library';\nimport CustomerCollection from './components/CustomerCollection';\n\nconst App = () => {\n  const BASE_URL = 'https://cors-anywhere.herokuapp.com/http://example-env.eba-2un3hw2p.us-west-2.elasticbeanstalk.com/';\n  const [selectedCustomer, setSelectedCustomer] = useState({\n    name: '',\n    id: null,\n  });\n  const [selectedMovie, setSelectedMovie] = useState({\n    title: '',\n    id: null,\n  });\n  const [customerList, setCustomerList] = useState([]);\n  const [movieList, setMovieList] = useState([]);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const [errorMessage, setErrorMessage] = useState(null);\n  const [addMovieAlert, setAddMovieAlert] = useState('');\n\n  useEffect(() => {\n    axios.get(BASE_URL + \"customers/\")\n      .then((response) => {\n        setCustomerList(response.data);\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n      })\n  }, []);\n\n  useEffect(() => {\n    axios.get(BASE_URL + \"movies/\")\n      .then((response) => {\n        const getMovies = response.data;\n        setMovieList(getMovies);\n      })\n      .catch((error) => {\n        setErrorMessage(error.message);\n      })\n  }, []);\n\n\n  const updateSelectedCustomer = (newSelected) => {\n    console.log(newSelected)\n\n    setSelectedCustomer({\n      name: newSelected.name,\n      id: newSelected.id\n    });\n    setSuccessMessage(`Customer ${newSelected.name} has been selected`)\n  };\n\n  const updateSelectedMovie = (newSelected) => {\n    setSelectedMovie({\n      title: newSelected.title,\n      id: newSelected.id\n    });\n    setSuccessMessage(`Movie ${newSelected.title} has been selected`)\n  };\n\n  const showRentalButton = () => {\n    console.log(selectedCustomer)\n    if (!(selectedMovie.id === null) && !(selectedCustomer.id === null)) {\n      return true;\n    };\n  };\n\n  const checkout = () => {\n    const rental_params = BASE_URL + `rentals/${selectedMovie.title}/check-out`;\n\n    axios({\n      method: 'post',\n      url: rental_params,\n      params: {\n        customer_id: selectedCustomer.id,\n        due_date: '2020/12/30'\n      }\n    })\n    .then(() => {\n      setSuccessMessage(\"Successfully made rental\")\n      const newSelected = {\n        id: null,\n        name: ''\n      }\n      updateSelectedCustomer(newSelected)\n      updateSelectedMovie(newSelected)\n    })\n    .catch((error) => {\n      setErrorMessage(error.message);\n    });\n  };\n\n  const addMovieToLibrary = (movie) => {\n    axios({\n      method: 'post',\n      url: BASE_URL + 'movies/',\n      params: movie \n    })\n    .then((response) => {\n      const newMovieList = movieList;\n      newMovieList.push(movie);\n      setMovieList(newMovieList);\n      setAddMovieAlert(`${ response.data.title } added to library!`);\n      console.log(response);\n    })\n    .catch((error) => {\n      setAddMovieAlert(\"This movie is already in the library.\");\n      console.log(error);\n    });\n  };\n\n  return (\n    <Router>\n      <div>\n        <header className=\"app-header\">\n          <div className='app-header__nav'>\n            <h1>The Movie App</h1>\n            <ul>\n              <li>\n                <Link to=\"/video-store-consumer\">Home</Link>\n              </li>\n              <li>\n                <Link to=\"/video-store-consumer/search\">Search</Link>\n              </li>\n              <li>\n                <Link to=\"/video-store-consumer/library\">Library</Link>\n              </li>\n              <li>\n                <Link to=\"/video-store-consumer/customers\">Customers</Link>\n              </li>\n            </ul>\n\n            { errorMessage ? <div><h2 className=\"error-msg\">{errorMessage}</h2></div> : '' }\n\n          </div>\n          <div className='app-header__selections'>\n            <h2>Rental Selections</h2>\n            <p>Movie: {selectedMovie.title}</p>\n            <p>Customer: {selectedCustomer.name}</p>\n            {\n              showRentalButton() ? \n              <button onClick={checkout}>\n                Create Rental\n              </button> : ''\n            } \n          </div>\n\n        </header>\n        {/*\n          A <Switch> looks through all its children <Route>\n          elements and renders the first one whose path\n          matches the current URL. Use a <Switch> any time\n          you have multiple routes, but you want only one\n          of them to render at a time\n        */}\n        <Switch>\n          <Route exact path=\"/video-store-consumer/\">\n            <Home />\n          </Route>\n          <Route path=\"/video-store-consumer/search\">\n            <Search addMovieCreationCallback={ addMovieToLibrary } addMovieAlert={ addMovieAlert } />\n          </Route>\n          <Route path=\"/video-store-consumer/library\">\n            <Library \n              movies={movieList}\n              onUpdateSelectedMovie={updateSelectedMovie}\n              selectedMovie={selectedMovie.id}\n            />\n          </Route>\n          <Route path=\"/video-store-consumer/customers\">\n            <CustomerCollection \n              customers={customerList} \n              onUpdateSelectedCustomer={updateSelectedCustomer} \n              selectedCustomer={selectedCustomer.id}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\n// You can think of these components as \"pages\"\n// in your app.\n\nfunction Home() {\n  return (\n    <div>\n      <img \n        src=\"https://i.imgur.com/C9BqQTO.png\" \n        alt=\"picture of film board and tickets\" \n        className=\"homepage-pic\"\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}